// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.3
// LVGL version: 8.3.11
// Project name: Retro Board Game
#include "game_logic.h"
#include "ui.h"

//---------------------------------------
void initGame(lv_event_t* e) {
	resetBoard();
	generateCodePeg();
	end = false;
	playing = true;
	enablePegRow(0);
}
//---------------------------------------

void togglePegColorCol1(lv_event_t* e) {
	decodePegs[current_row][0]++;                                                                    //point to new color
	if (decodePegs[current_row][0] > 4) decodePegs[current_row][0] = 1;                              // 1 - 4
	lv_obj_t* obj = lv_event_get_target(e);                                                          // the widget that triggered this event
	lv_obj_set_style_bg_color(obj, lv_color_hex(colors[decodePegs[current_row][0]]), LV_PART_MAIN);  // red
}

void togglePegColorCol2(lv_event_t* e) {
	decodePegs[current_row][1]++;                                                                    //point to new color
	if (decodePegs[current_row][1] > 4) decodePegs[current_row][1] = 1;                              // 1 - 4
	lv_obj_t* obj = lv_event_get_target(e);                                                          // the widget that triggered this event
	lv_obj_set_style_bg_color(obj, lv_color_hex(colors[decodePegs[current_row][1]]), LV_PART_MAIN);  // red
}

void togglePegColorCol3(lv_event_t* e) {
	decodePegs[current_row][2]++;                                                                    //point to new color
	if (decodePegs[current_row][2] > 4) decodePegs[current_row][2] = 1;                              // 1 - 4
	lv_obj_t* obj = lv_event_get_target(e);                                                          // the widget that triggered this event
	lv_obj_set_style_bg_color(obj, lv_color_hex(colors[decodePegs[current_row][2]]), LV_PART_MAIN);  // red
}

void togglePegColorCol4(lv_event_t* e) {
	decodePegs[current_row][3]++;                                                                    //point to new color
	if (decodePegs[current_row][3] > 4) decodePegs[current_row][3] = 1;                              // 1 - 4
	lv_obj_t* obj = lv_event_get_target(e);                                                          // the widget that triggered this event
	lv_obj_set_style_bg_color(obj, lv_color_hex(colors[decodePegs[current_row][3]]), LV_PART_MAIN);  // red
}
//---------------------------------------

//User click on check box for each row
void CheckCode(lv_event_t* e) {
  minute = MAX_SECOND;// reset countdown timer
	uint8_t score = 0;
	//compare peg color code and get score
	if (encodePegs[0] == decodePegs[current_row][0]) score++;
	if (encodePegs[1] == decodePegs[current_row][1]) score++;
	if (encodePegs[2] == decodePegs[current_row][2]) score++;
	if (encodePegs[3] == decodePegs[current_row][3]) score++;

	//Give white marks pegs
	lv_obj_t* parent = container[current_row];
	uint16_t count = lv_obj_get_child_cnt(parent);

	for (uint16_t i = 4; i < 4 + score; i++) {
		if (i < count) {  // âœ… prevent out-of-bounds
			lv_obj_t* child = lv_obj_get_child(parent, i);
			lv_obj_set_style_bg_color(child, lv_color_hex(0xFFFFFF), LV_PART_MAIN);
		}
	}

	if (score == 4) { // all match -> win
	  set_disable_clickable_recursive(container[current_row]);//disable current row
		lv_label_set_text(ui_Main_Label_timer1, " WIN");
		lv_obj_add_flag(ui_Main_Label_binder, LV_OBJ_FLAG_HIDDEN);  //hide binder show the code pegs
		end = true;
		delay_anim_timer();

	} else { // some mismatch
    
		current_row++;// continue to the next row

		if (current_row >= MAX_ROW) {  // GAME OVER
			set_disable_clickable_recursive(container[MAX_ROW - 1]);//disable last ROW
			lv_label_set_text(ui_Main_Label_timer1, "LOST");
			lv_obj_add_flag(ui_Main_Label_binder, LV_OBJ_FLAG_HIDDEN);  //hide binder show the code pegs
			end = true;
			delay_anim_timer();

		} else {
			lv_label_set_text(ui_Main_Label_timer1, "NEXT");
			enablePegRow(current_row);  // continue the next row
		}
	}
}
//---------------------------------------